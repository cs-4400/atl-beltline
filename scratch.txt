DROP DATABASE if exists atlanta_beltline;
CREATE DATABASE atlanta_beltline;
USE atlanta_beltline;

DROP TABLE if exists user;
CREATE TABLE user (
	username VARCHAR(50) NOT NULL,
	password VARCHAR(50) NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	status ENUM("Pending", "Approved", "Declined") DEFAULT "Pending",
  user_type ENUM('Employee','Visitor', 'Employee, Visitor', 'User'),
  PRIMARY KEY (username)
);

DROP TABLE if exists user_email;
CREATE TABLE user_email (
	username VARCHAR(50) NOT NULL,
	email VARCHAR(75) NOT NULL,
	Primary Key (username, email),
	Foreign Key (username) references user (username) on delete cascade on update cascade
);

DROP TABLE if exists employee;
CREATE TABLE employee (
	username VARCHAR(50) NOT NULL,
	emp_ID INT NOT NULL,
	phone VARCHAR(10) NOT NULL,
	address VARCHAR(95),
	city VARCHAR(50),
	state VARCHAR(3),
	zip INT,
	emp_type ENUM('Admin', 'Manager', 'Staff'),
	Primary Key (emp_ID),
	Foreign Key (username) references user (username) on delete cascade on update cascade
);

DROP TABLE if exists site;
CREATE TABLE site (
	name VARCHAR(50) NOT NULL,
	address VARCHAR(95),
	zipcode INT,
	open_everyday VARCHAR(50),
	manager_username VARCHAR(55) NOT NULL,
	Primary Key (name),
	Foreign key (manager_username) references user (username) on delete cascade on update cascade
);

DROP TABLE if exists visit_site;
CREATE TABLE visit_site (
	username VARCHAR(50)  NOT NULL,
	site_name VARCHAR(50) NOT NULL,
	visit_date DATE NOT NULL,
	Primary Key (username, visit_date, site_name),
	Foreign Key (username) references user (username) on delete cascade on update cascade,
	Foreign Key (site_name) references site (name) on delete cascade on update cascade
);

DROP TABLE if exists event;
CREATE TABLE event (
	event_name VARCHAR(50) NOT NULL,
	event_start DATE NOT NULL,
	site_name VARCHAR(50) NOT NULL,
	end_date DATE,
	event_price INT,
	capacity INT,
	min_staff INT,
	description TEXT,
	Primary Key (event_name, event_start, site_name),
	Foreign Key (site_name) references site (name) on delete cascade on update cascade
);


DROP TABLE if exists visit_event;
CREATE TABLE visit_event (
	username VARCHAR(50) NOT NULL,
	event_name VARCHAR(50) NOT NULL,
	event_start DATE NOT NULL,
	site_name VARCHAR(50) NOT NULL,
	visit_date DATE NOT NULL,
	Primary Key (username, visit_date, event_name, event_start, site_name),
	Foreign Key (username) references user (username) on delete cascade on update cascade,
	Foreign Key (event_name, event_start) references event (event_name, event_start) on delete cascade on update cascade,
	Foreign Key (site_name) references site (name) on delete cascade on update cascade
);

DROP TABLE if exists assign_to;
CREATE TABLE assign_to (
	staff_username VARCHAR(55) NOT NULL,
	event_name VARCHAR(50) NOT NULL,
	event_start DATE NOT NULL,
	site_name VARCHAR(50) NOT NULL,
	Primary Key (staff_username, event_name, event_start, site_name),
	Foreign Key (staff_username) references user (username) on delete cascade on update cascade,
	Foreign Key (event_name, event_start) references event (event_name, event_start) on delete cascade on update cascade,
	Foreign Key (site_name) references site (name) on delete cascade on update cascade
);


DROP TABLE if exists transit;
CREATE TABLE transit (
	type VARCHAR(25) NOT NULL,
	route VARCHAR(25) NOT NULL,
	price FLOAT,
	Primary Key (type, route)
);

DROP TABLE if exists connects;
CREATE TABLE connects (
	site_name VARCHAR(50) NOT NULL,
	transit_type VARCHAR(25) NOT NULL,
	transit_route VARCHAR(25) NOT NULL,
	Primary Key(site_name, transit_type, transit_route),
	Foreign Key (site_name) references site (name) on delete cascade on update cascade,
        	Foreign Key (transit_type, transit_route) references transit (type, route) on delete cascade on update cascade
);

DROP TABLE if exists take_transit;
CREATE TABLE take_transit (
	username VARCHAR(50) NOT NULL,
	type VARCHAR(25) NOT NULL,
	route VARCHAR(25) NOT NULL,
	date DATE NOT NULL,
	Primary Key(username, date, type, route),
	Foreign Key (username) references user (username) on delete cascade on update cascade,
	Foreign Key (type, route) references transit (type, route) on delete cascade on update cascade
);
